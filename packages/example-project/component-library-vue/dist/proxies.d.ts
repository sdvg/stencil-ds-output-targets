import type { JSX } from 'component-library';
export declare const MyButton: import("vue").DefineComponent<JSX.MyButton & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    strong?: boolean;
    disabled?: boolean;
    fill?: "default" | "solid" | "clear" | "outline";
    type?: "button" | "reset" | "submit";
    constructor?: Function;
    mode?: "ios" | "md";
    color?: string;
    size?: "small" | "default" | "large";
    modelValue?: string | boolean;
    hasOwnProperty?: (v: PropertyKey) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: PropertyKey) => boolean;
    buttonType?: string;
    expand?: "full" | "block";
    download?: string;
    href?: string;
    rel?: string;
    shape?: "round";
    target?: string;
    onMyBlur?: (event: CustomEvent<void>) => void;
    onMyFocus?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const MyCheckbox: import("vue").DefineComponent<JSX.MyCheckbox & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    value?: string;
    constructor?: Function;
    name?: string;
    mode?: "ios" | "md";
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: PropertyKey) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: PropertyKey) => boolean;
    onMyBlur?: (event: CustomEvent<void>) => void;
    onMyFocus?: (event: CustomEvent<void>) => void;
    checked?: boolean;
    indeterminate?: boolean;
    onMyChange?: (event: CustomEvent<import("component-library/dist/types/components/element-interface").CheckboxChangeEventDetail>) => void;
}>, {}>;
export declare const MyComponent: import("vue").DefineComponent<JSX.MyComponent & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    middle?: string;
    constructor?: Function;
    first?: string;
    last?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: PropertyKey) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: PropertyKey) => boolean;
    age?: number;
    kidsNames?: string[];
    onMyCustomEvent?: (event: CustomEvent<number>) => void;
}>, {}>;
export declare const MyInput: import("vue").DefineComponent<JSX.MyInput & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    max?: string;
    required?: boolean;
    pattern?: string;
    readonly?: boolean;
    disabled?: boolean;
    type?: import("component-library/dist/types/interfaces").TextFieldTypes;
    value?: string | number;
    constructor?: Function;
    name?: string;
    mode?: "ios" | "md";
    color?: string;
    size?: number;
    multiple?: boolean;
    step?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: PropertyKey) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: PropertyKey) => boolean;
    onMyBlur?: (event: CustomEvent<void>) => void;
    onMyFocus?: (event: CustomEvent<void>) => void;
    onMyChange?: (event: CustomEvent<import("component-library/dist/types/components/my-input/my-input").InputChangeEventDetail>) => void;
    accept?: string;
    autocapitalize?: string;
    autocomplete?: import("component-library/dist/types/interfaces").AutocompleteTypes;
    autocorrect?: "off" | "on";
    autofocus?: boolean;
    clearInput?: boolean;
    clearOnEdit?: boolean;
    enterkeyhint?: "search" | "enter" | "next" | "done" | "go" | "previous" | "send";
    inputmode?: "search" | "numeric" | "none" | "text" | "decimal" | "tel" | "url" | "email";
    maxlength?: number;
    min?: string;
    minlength?: number;
    placeholder?: string;
    spellcheck?: boolean;
    onMyInput?: (event: CustomEvent<KeyboardEvent>) => void;
}>, {}>;
export declare const MyPopover: import("vue").DefineComponent<JSX.MyPopover & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    event: any;
} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    mode?: "ios" | "md";
    component?: import("component-library/dist/types/interfaces").ComponentRef;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: PropertyKey) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: PropertyKey) => boolean;
    componentProps?: unknown;
    keyboardClose?: boolean;
    cssClass?: string | string[];
    backdropDismiss?: boolean;
    showBackdrop?: boolean;
    translucent?: boolean;
    animated?: boolean;
    onMyPopoverDidDismiss?: (event: CustomEvent<import("component-library/dist/types/interfaces").OverlayEventDetail<any>>) => void;
    onMyPopoverDidPresent?: (event: CustomEvent<void>) => void;
    onMyPopoverWillDismiss?: (event: CustomEvent<import("component-library/dist/types/interfaces").OverlayEventDetail<any>>) => void;
    onMyPopoverWillPresent?: (event: CustomEvent<void>) => void;
}>, {
    event: any;
}>;
export declare const MyRadio: import("vue").DefineComponent<JSX.MyRadio & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value: any;
} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    constructor?: Function;
    name?: string;
    mode?: "ios" | "md";
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: PropertyKey) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: PropertyKey) => boolean;
    onMyBlur?: (event: CustomEvent<void>) => void;
    onMyFocus?: (event: CustomEvent<void>) => void;
    onMySelect?: (event: CustomEvent<void>) => void;
}>, {
    value: any;
}>;
export declare const MyRadioGroup: import("vue").DefineComponent<JSX.MyRadioGroup & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value: any;
} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    name?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: PropertyKey) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: PropertyKey) => boolean;
    onMyChange?: (event: CustomEvent<import("component-library/dist/types/components/my-radio-group/my-radio-group").RadioGroupChangeEventDetail>) => void;
    allowEmptySelection?: boolean;
}>, {
    value: any;
}>;
export declare const MyRange: import("vue").DefineComponent<JSX.MyRange & import("./vue-component-lib/utils").InputProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    max?: number;
    disabled?: boolean;
    value?: import("component-library/dist/types/components/my-range/my-range").RangeValue;
    constructor?: Function;
    name?: string;
    mode?: "ios" | "md";
    color?: string;
    step?: number;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: PropertyKey) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: PropertyKey) => boolean;
    onMyBlur?: (event: CustomEvent<void>) => void;
    onMyFocus?: (event: CustomEvent<void>) => void;
    onMyChange?: (event: CustomEvent<import("component-library/dist/types/components/my-range/my-range").RangeChangeEventDetail>) => void;
    min?: number;
    debounce?: number;
    dualKnobs?: boolean;
    pin?: boolean;
    snaps?: boolean;
    ticks?: boolean;
}>, {}>;
